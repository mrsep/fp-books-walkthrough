#lang br/quicklang

; the reader
(define (read-syntax path port)
  (define args (port->lines port))
  (define handle-datums (format-datums '~a args)) ; store code-lines in a list
  (define module-datum `(module funstacker-mod "funstacker.rkt"
                          (handle-args ,@handle-datums))) ; splice all args as arugments of a single S-exp
  (datum->syntax #f module-datum)) ; transform code module to syntax object

(provide read-syntax)

; the expander
(define-macro (funstacker-module-begin HANDLE-ARGS-EXPR)
  #'(#%module-begin
     (display (first HANDLE-ARGS-EXPR)))) ; display the top element in the finished stack generated by handle-args

(provide (rename-out [funstacker-module-begin #%module-begin]))

; public API of the stacker language
(define (handle-args . args)
  (for/fold ([stack-acc empty])             ; list of accumulators (replaced with every final expression in the body)
            ([arg (filter-not void? args)]) ; list of iterators
    (cond
      [(number? arg) (cons arg stack-acc)]
      [(or (equal? arg +) (equal? arg *))
       (define op-result
         (arg (first stack-acc) (second stack-acc)))
       (cons op-result (drop stack-acc 2))])))

(provide handle-args)

(provide * +)
